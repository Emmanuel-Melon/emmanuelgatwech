{"version":3,"sources":["webpack:///./src/pages/contact.js"],"names":["Header","styled","div","types","Map","set","ContactPage","useState","isNameValid","setNameValid","name","setName","email","setEmail","message","setMessage","title","keywords","className","contactStyles","content","form","method","action","onSubmit","e","console","log","user","label","text","type","placeholder","id","value","onChange","isValid","RegExp","get","test","target","cols","rows","submit"],"mappings":"4nBAOA,IAAMA,E,UAASC,EAAOC,IAAV,KAiBNC,EAAQ,IAAIC,IAClBD,EAAME,IAAI,QAAS,wIACnBF,EAAME,IAAI,OAAQ,SAClBF,EAAME,IAAI,UAAW,SAyENC,UAtEK,WAAO,IAAD,EACcC,oBAAS,GADvB,aAEYA,oBAAS,IAAtCC,EAFiB,KAEJC,EAFI,OAGkBF,oBAAS,GAH3B,aAIAA,mBAAS,KAA1BG,EAJiB,KAIXC,EAJW,OAKEJ,mBAAS,IAA5BK,EALiB,KAKVC,EALU,OAMMN,mBAAS,IAAhCO,EANiB,KAMRC,EANQ,OAOYR,mBAAS,IAPrB,UA6BxB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKS,MAAM,WAAWC,SAAU,CAAC,kBAAD,oGAChC,kBAACjB,EAAD,KACE,6BACM,wBAAIkB,UAAU,eAAd,cACR,uBAAGA,UAAaV,EAAe,MAAQ,QAAvC,8BAIA,yBAAKU,UAAWC,IAAcC,SAC1B,0BAAMF,UAAWC,IAAcE,KAAMC,OAAO,OAAOC,OAAO,gCAAgCC,SA/B7E,SAAAC,GACnBC,QAAQC,IAAI,kBA+BJ,yBAAKT,UAAWC,IAAcS,MAC1B,2BAAOV,UAAWC,IAAcU,OAC9B,0BAAMX,UAAWC,IAAcW,MAA/B,QACA,2BACEC,KAAK,OACLC,YAAY,OACZC,GAAG,OACHvB,KAAK,OACLwB,MAAOxB,EACPyB,SA7BQ,SAAAV,GACxB,IACMW,EADQ,IAAIC,OAAOlC,EAAMmC,IAAI,SACbC,KAAKd,EAAEe,OAAON,OACpCR,QAAQC,IAAIS,GACZ3B,EAAa2B,GACbzB,EAAQc,EAAEe,OAAON,WA0BL,2BAAOhB,UAAWC,IAAcU,OAC9B,0BAAMX,UAAWC,IAAcW,MAA/B,SACA,2BAAOC,KAAK,QAAQC,YAAY,gBAAiBC,GAAG,gBAAgBvB,KAAK,WAAWwB,MAAOtB,EAAOuB,SAzCxF,SAAAV,GACxB,IACMW,EADQ,IAAIC,OAAOlC,EAAMmC,IAAI,UACbC,KAAKd,EAAEe,OAAON,OACpCR,QAAQC,IAAIS,GACZvB,EAASY,EAAEe,OAAON,YAwCV,6BACE,2BAAOhB,UAAWC,IAAcU,OAC9B,0BAAMX,UAAWC,IAAcW,MAA/B,WACA,8BAAUG,GAAG,UAAUD,YAAY,eAAeS,KAAK,KAAKC,KAAK,IAAIxB,UAAWC,IAAcL,QAASJ,KAAK,UAAUwB,MAAOpB,EAASqB,SAAU,SAAAV,GAAC,OAAIV,EAAWU,EAAEe,OAAON,YAG7K,4BAAQH,KAAK,SAASb,UAAWC,IAAcwB,QAA/C","file":"component---src-pages-contact-js-3b98ba88dda2c2dcc842.js","sourcesContent":["import React, { useState, useReducer } from \"react\"\nimport contactStyles from '../components/contact.module.css'\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport styled from 'styled-components'\n\nconst Header = styled.div`\n    background: rgb(14, 4, 1);\n  background: linear-gradient(\n    9deg,\n    rgba(14, 4, 1, 0.5) 0%,\n    rgba(46, 17, 8, 0.5) 35%,\n    rgba(24, 5, 1, 0.5) 100%\n  );\n  color: #fff;\n  display: flex;\n  width: 100%;\n  border: solid 1px #eee;\n  margin: 0 auto 0.5em;\n  padding-left: 1.5em;\n`\n\n\nconst types = new Map();\ntypes.set('email', /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/);\ntypes.set('name', /[a-z]/);\ntypes.set('message', /[a-z]/);\n\n\nconst ContactPage = () => {\n  const [isEmailValid, setEmailValid] = useState(false)\n  const [isNameValid, setNameValid] = useState(false)\n  const [isMessageValid, setMessageValid] = useState(false)\n  const [name, setName] = useState('')\n  const [email, setEmail] = useState('')\n  const [message, setMessage] = useState('')\n  const [formErrors, setFormErrors] = useState({})\n\n  const handleSubmit = e => {\n    console.log('handleSubmit')\n  }\n\n  const handleEmailChange = e => {\n    const regex = new RegExp(types.get('email'));\n    const isValid = regex.test(e.target.value);\n    console.log(isValid)\n    setEmail(e.target.value)\n  }\n\n  // conditional style names in styled-components\n  const handleInputChange = e => {\n    const regex = new RegExp(types.get('name'));\n    const isValid = regex.test(e.target.value);\n    console.log(isValid)\n    setNameValid(isValid)\n    setName(e.target.value)\n  }\n\n  return (\n    <Layout>\n      <SEO title=\"Projects\" keywords={[`Emmanuel Daniel`, `Emmanuel Gatwech`, `react`, `Node.js`, `Eman`, `Junubiman`, `South Sudan`, `Juba`, `Software Engineer`]} />\n      <Header>\n        <div>\n              <h1 className='sub-heading'>Contact Me</h1>\n      <p className={ (isNameValid) ? 'red' : 'blue' }>\n        Let's have a little chat\n      </p></div>\n      </Header>\n      <div className={contactStyles.content}>\n          <form className={contactStyles.form} method=\"post\" action=\"https://formspree.io/mzbdqweb\" onSubmit={handleSubmit}>\n            <div className={contactStyles.user}>\n                <label className={contactStyles.label}>\n                  <span className={contactStyles.text}>Name</span>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Name\"\n                    id=\"Name\"\n                    name=\"name\"\n                    value={name}\n                    onChange={handleInputChange}/>\n                </label>\n                <label className={contactStyles.label}>\n                  <span className={contactStyles.text}>Email</span>\n                  <input type=\"email\" placeholder=\"Email Address\"  id=\"Email Address\" name=\"_replyto\" value={email} onChange={handleEmailChange}/>\n                </label>\n            </div>\n            <div>\n              <label className={contactStyles.label}>\n                <span className={contactStyles.text}>Message</span>\n                <textarea id=\"message\" placeholder=\"Your Message\" cols=\"30\" rows=\"5\" className={contactStyles.message} name=\"message\" value={message} onChange={e => setMessage(e.target.value)}/>\n              </label>\n            </div>\n            <button type=\"submit\" className={contactStyles.submit}>Send</button>\n          </form>\n      </div>\n    </Layout>\n  )\n}\n\nexport default ContactPage\n\n// use form labels to indicate validity status of inputs and have them light up green or red\n"],"sourceRoot":""}